Version 2.0.2  release 28.12.2021
Используемые стандартные библиотеки

<stdlib.h>
<unistd.h>
<fcntl.h>

Определения

BUFFER_SIZE 	42			  	определяет порции считывания данных для функции get_next_line
MAX_INT 		2147483647		
MIN_INT 		-2147483648
FT_TRUE 		1
FT_FALSE 		0

Типы и структуры

односвязный список

typedef struct s_list
{
   void            *content;
   struct s_list   *next;
}   t_list;

двусвязный список

typedef struct s_dlist
{
   void            *content;
   struct s_dlist  *next;
   struct s_dlist  *prev;
}   t_dlist;


Функции

анализ данных
ft_isalnum	возвращает 1, если символ является буквенно-цифровым, иначе возвращает 0
ft_isalpha	возвращает 1, если символ является буквенным, иначе возвращает 0
ft_isascii	возвращает ненулевое значение, если значение c находится в пределах от 0 до 0x7F, в противном случае возвращается 0
ft_isdigit	возвращает 1, если символ является цифровым, иначе возвращает 0
ft_isprint	возвращает ненулевое значение, если аргумент c является печатным символом, включая пробел
			в противном случае возвращает 0. Значения печатных символов находятся в пределах от 0x20 до 0х7Е.

работа с памятью
ft_bzero	обнуляет n байт памяти
ft_calloc	распределяет память для массива в  n элементов и зануляет ее, возвращает ссылку на эту область или NULL в случае неудачи
ft_memchr	ищет в области памяти символ, если искомый символ найден, то возвращается адрес найденного символа. Если,
			после проверки n байтов, искомый символ не найден, возвращается NULL
ft_memcmp	побайтно сравнивает две области памяти. Каждый байт массива определяется типом unsigned char. 
			Сравнение продолжается, пока не будут проверено n байт или пока не встретятся отличающиеся байты
ft_memcpy	копирует n байт из области памяти src в dst. Если массивы перекрываются, результат копирования будет не определен
ft_memmove	копирует n байт из области памяти src, в область памяти dst. При этом области памяти могут пересекаться.
ft_memset	заполняет первые len байт области памяти, на которую указывает аргумент b, символом c

работа со строками
ft_strlen	вычисляет количество символов в строке до первого вхождения символа конца строки.
			При этом символ конца строки не входит в подсчитанное количество символов
ft_split	возвращает (malloc) массив строк - все заканчивающиеся на \0,
			полученных путем разбиения строки символом c в качестве разделителя. Если распределение завершается неудачно, 
			функция возвращает NULL
ft_strchr	ищет первое вхождения символа в строке
ft_strnstr	ищет первое вхождение len символов строки (за исключением признак конца строки) needle, в строку haystack.
			Если строка needle имеет нулевую длину, то функция вернет указатель на начало строки haystack
ft_strrchr	ищет последнее вхождения символа, код которого указан в аргументе c, в строке, на которую указывает аргумент s.
ft_strncmp	побайтно сравнивает коды символов двух строк, на которые указывают аргументы функции.
			Сравнение прекращается если встретились отличающиеся символы. При этом возвращается отрицательное или положительное число 
			(Положительное число – если код первого больше кода символа в строке s2. Отрицательное число – если наоборот). 
			Если были проверены n символов и отличий не было возвращается ноль.
ft_strlcpy	копирует данные из строки src, в строку dst, пока не встретится символ конца строки \0 или не будет скопировано size байт.
			Максимальное количество скопированных байт не может превышать длину строки src. 
			В результате гарантированно получается 0\ строка, при этом если указывается количество копируемых байт учитывается и завершающий ноль.
			Возвращает фактическое количество скопированных байт, т.е для полного копирования src должно вернуться ft_strlen(src)
ft_strlcat	добавляет в строку  s1, строку s2, пока не встретится символ конца строки или пока не будет добавлено n символов. 
			В отличие от других функций, strlcat принимает полный размер буфера и гарантирует наличие терминального символа. 
			Для корректной работы функции strlcat, ей необходимо передавать только нуль терминальные строки
ft_strjoin	возвращает «свежую» строку (malloc), заканчивающуюся на \0, в результате объединения s1 и s2. 
			Если распределение завершается неудачно, функция возвращает NULL
ft_strdup	дублирует строку, на которую указывает аргумент s1. Память под дубликат строки выделяется с помощью функции malloc, 
			и по окончанию работы с дубликатом должна быть очищена с помощью функции free
ft_substr	распределяет (с помощью malloc) и возвращает «свежую» подстроку из строки, заданной в качестве аргумента. 
			Подстрока начинается с start и имеет размер len. Если start и len не ссылаются на допустимую подстроку, поведение не определено.
			Если распределение завершается неудачно, функция возвращает NULL
ft_strtrim	выделяет (с помощью malloc) и возвращает копию строки, заданной в качестве аргумента, без пробелов в начале или конце строки.
			Будут считаться пробелами следующие символы ’ ’, ’\n’ и ’\t’. Если у s нет пробелов в начале или в конце, функция возвращает копию s. 
			Если распределение завершается неудачно, функция возвращает NULL
ft_striteri	применяет функцию f к каждому символу строки s, переданной в качестве аргумента, и передав ее индекс в качестве первого аргумента. 
			Каждый символ передается по адресу f для изменения, если это необходимо
ft_strmapi	применяет функцию f к каждому символу строки s, переданной в качестве аргумента, указав ее индекс в качестве первого аргумента, 
			чтобы создать «свежую» новую строку (с malloc), полученную в результате последовательного применения f

ввод / вывод
ft_putchar_fd	выводит символ c в файловый дескриптор fd
ft_putnchar_fd	выводит n символов ch в файловый дескриптор fd, возвращает количество записанных символов
ft_putstr_fd	выводит строку s в файловый дескриптор fd
ft_putendl_fd	выводит строку s с символом переноса строки \n в файловый дескриптор fd.
ft_putnbr_fd	выводит число n в файловый дескриптор fd
get_next_line	возвращает строку из открытого файла fd, или пустую, если читать больше нечего

конверсия данных
ft_atoi		конвертирует строку, на которую указывает параметр str, в величину типа int. удаляет предваряющие пробелы, 
			знаки табуляции, возвраты каретки и т.д. учитывает знак. если число больше maxint - возвращает -1, 
			меньше minint или число предваряют недопустимые символы - 0
ft_itoa		конвертирует int в строку - распределяет (с помощью malloc)
ft_tolower	возвращает нижний регистр символа если он в верхнем. В противном случае возвращается неизмененным
ft_toupper	возвращает верхний регистр символа если он в нижнем. В противном случае возвращается неизмененным

работа с односвязными списками
ft_lstnew			создает (с помощью malloc) новый узел списка с контентом в параметре (даже если он нулевой). ссылка next = NULL
ft_lstadd_front		добавляет узел в начало списка, если они оба существуют, иначе ничего не делает
ft_lstadd_back		добавляет узел в конец списка, если список пустой возвращает ссылку на параметр (NULL если параметр NULL)
ft_lstdelone		удаляет нод и освобождает память его данных, используя функцию del,
ft_lstclear			принимает указатель на элемент списка и освобождает его память и всех наследников этого элемента, 
					используя функции del и free. В итоге, указатель на только что освобожденный элемент должен быть установлен в NULL
ft_lstsize			возвращает размер списка
ft_lstlast			возвращает указатель на последний элемент списка
ft_lstiter			применяет функцию f к каждому элементу списка lst
ft_lstmap			перебирает список lst и применяет функцию f к каждому элементу, чтобы создать новый список (malloc), 
					полученный в результате применения функции f к содержимому узлов

работа с двусвязными списками
ft_dlstnew			создает (с помощью malloc) новый узел списка с контентом в параметре (даже если он нулевой). 
					ссылки next = NULL и prev = NULL
ft_dlstadd_front	добавляет узел в начало списка, если они оба существуют, иначе ничего не делает
ft_dlstadd_back		добавляет узел в конец списка, если список пустой возвращает ссылку на параметр (NULL если параметр NULL)
ft_dlstdelone		удаляет нод и освобождает память его данных, используя функцию del, возвращает ссылку на next нод или NULL,
					если нод был последний
ft_dlstclear		принимает указатель на элемент списка и освобождает его память и всех наследников этого элемента, 
					используя функции del и free. 
ft_dlstsize			возвращает размер списка
ft_dlstiter			применяет функцию f к каждому элементу списка dlst
ft_dlstmap			перебирает список dlst и применяет функцию f к каждому элементу, чтобы создать новый список (malloc), 
					полученный в результате применения функции f к содержимому узлов
  